# PHP Conference 2025 発表練習 文字起こし（整理版）

## 導入・自己紹介

早速ですが、PHP Conference 2025発表を始めさせていただきます。株式会社コドモンの小堀明と申します。よろしくお願いします。本日は「AIエージェントはこう育てる」というテーマで、生成AIのAIエージェントに関する導入や、チームで活用するための経験談をお話しできればと思っています。

改めまして、現在コドモンのエンジニアをやっておりまして、この会社に入社してからPHPは本格的に触っております。昔、高校生くらいの時に自分のホームページを作っていた頃にWordPressを触っていたので、厳密には20年以上PHPとは戯れています。

生成AI、アジャイル、個人開発等々に興味がありまして、今回は生成AIをテーマに話させていただきます。過去の登壇もしておりまして、特にアジャイルの話を以前の登壇ではよくしていたので、もしご興味があれば、ぜひこちらのものも見ていただけたらと思います。

この発表は、私はプロレスが好きなんですが、第一試合がプロレスはめちゃくちゃ大事でして、おそらくカンファレンスも同様に最初の発表が次以降の発表の盛り上がりを作っていくものだと思っていますので、ぜひ何とかいい発表をしたいと思っています。皆さんもぜひ元気よく聞いていただければと思います。## Claude Codeについて

AIエージェントに関しまして、絶対に今一番言っておかないといけないなと思ったこととして、Claude Codeの話を先にしておこうと思います。

まず結論から申し上げますと、現時点ではClaude Codeの導入もぜひ検討すべきかなというのが個人的な感想となります。今回私がプロポーザルを出したタイミングでは、Claude Codeはまだ発表されておらず、今年の2月ぐらいにエージェントもCopilotも導入したんですが、そういった流れで今回はエージェントの発表をします。場合によっては次回の発表はClaude Codeの話になっているかもしれません。

## 本日の結論

まず先に結論を見ていきましょう。

1. AIエージェントの利用は全員でやること
2. IssueやPRの作成から改善していきましょうということ
3. Copilot用のドキュメントのメンテナンスに注力していきましょうということ

まずはここの話を少し頭に入れてもらいながら聞いていただくと良いかもしれません。納得いただいて既に納得してもらっているところは「そうだな」と思いながら聞いてもらって、「そうなんだ」と思ったところはぜひ注意して聞いてもらえたらと思います。## GitHub Copilot Agentの効果

では具体的にいきましょう。まずGitHub Copilot Agentですね。Copilot Agentを活用したことで、PRが200件から400件に倍増したということと、リリースも前期は期間において30件だったものが50件になったりとか、コミット数は10倍になりました。

利用し始めてから3ヶ月ですが、その3ヶ月でかなり、すでに活用できるところがいっぱい増えているという感じでございます。

ちなみに、こういったカンファレンスに集まっていただくような方というのは、割と積極的にいろんなスキル、技術を吸収しよう、自分で学んでいこうという方が比較的多いんだと思うんですが、そこにピンを留めてしまうと、やる人とやらない人が出てきて、逆に新しい技術を投入したことにより、むしろチームの生産性としてはいびつになってしまったりということがあるので、個人的にはこういった新しい技術を入れるときというのは、できる限り参加するハードルを下げて、自然と使ってますみたいなところに持っていくというのがマネージャーの腕の見せ所なんじゃないかというふうに思っております。## Step1: エージェントの導入

さて、というわけで順番に今やっていくためのものを見ていきましょう。まずStep1、エージェントの導入になります。

エージェントの導入って言って、ただ使えばいいっていう話なんですけど、実際にエージェントを使いましょうって時に、例えばですけど、いきなり使いますとあるいは調べてパッと使いましたっていう人もいれば、なんか動かないとか、どうやってやるんですかみたいな、こういうレベルも実はあると思うんですね。

例えばそういったところで、使いこなせそうです、使いこなしてますっていう人と、まだ使えてもいない、始められてもいないんですけどみたいな人との間で、その分断が起きるみたいなことを避けたいっていうのがまず最初になります。

そのために何をするかというと、ここにあるように、まずは全体的なシステムプロンプトの準備というのが大事になるかと思います。

もう一つがですね、このエージェントのインストール、まず最初にですね、エージェントのこのインストール部分から実際に使ってみるっていうところをハンズオンでやってしまいましょうというのがまず挙げられます。

意外とこういうの、ドキュメントだとか、各自で良いなり悪いなり、そういった技術系のブログを読んでやりましょうみたいな風に始まっていくパターンも結構あると思うんですが、この時点で脱落みたいなことを絶対防いでおきたいという感じになります。

そしてあとはシステムプロンプトの準備をしておくということです。プロンプトの中身に関してはちょっと後述をしていきます。 ### システムプロンプトの中身

中身ですが、必ずこの`.github`の中に`Copilot Instructions`という名前でコミットをすると良いです。これはGitHub エージェント側が決めているファイル名のルールですね。

例えばまずいきなり指示の内容といっても難しいと思うので、例えば最初にお勧めしたいのは言語設定ですね。これはユニバーサルな環境でなければ、日本語の回答を必ずするとか。

あと生成AIのエージェントは割と一度に結構規模の大きいことをやりがちなので、それをあらかじめ制約をかけておくように、コミットレベルは小さくなるように、コミットレベルになるようにしてくださいとか。

あと個人的にはこれ結構好きなんですけど、実際やったことをレポートとして残しておくようにすると、何やったんだっけとかっていうのが分かったりだとか、あるいは人に共有するときに、このログを渡してあげると多少なりとも情報の伝達になるというところで、こういったのはお勧めかなというふうに思っています。

こんな感じでですね、まずは全員がとりあえず使えるようにすると、利用できる人と利用ができない人、始められる人と始められない人みたいに、改めて使いこなせる人と使いこなせない人みたいなのができてしまうことを避けるためですね。 ## Step2: プロンプトの整備

具体的にいろんなものをプロンプトとして作れるんですけど、個人的にはですね、その中でもIssueの作成やPRの作成みたいなところをまずプロンプトにしていくというのがお勧めになります。

添付の画像は実際にPRを作成するプロンプトを作った時のものですね。こんな感じでスラッシュコマンドで呼び出せるようになります。

なんでIssueやPRの作成のプロンプトを優先するのかといいますと、まずIssueやPRって基本的には日本語をいっぱい書くタイミングになるんですけど、ここって一番人がサボりやすい、いわゆる「行動を見てよ」みたいな話になりやすかったりとか、あるいは簡潔に言うとみたいな感じで結構大事な情報をごっそり抜いて一行だけ書いてありますみたいなこともあるんじゃないかというふうに思います。

またIssueを作成して実装を行い、テストが終わったらPRを作ってレビュー依頼を投げるみたいな開発の流れにおける始まりとほぼほぼ終わりみたいなところになるので、ここからスタートするとIssueをエージェントで作れたんだから、その次のIssueをベースにした開発もエージェントでやろうというふうに、始まりがエージェントでスタートしたので、始まりがエージェント、終わりもエージェント、その間のステップもエージェントにしていけるんじゃないかというふうに、チームでポジティブな期待を持てるというのがあるかなと思っています。 ### プロンプト作成の具体例

例えば具体的にどんなプロンプトを作っているかといいますと、まずルールとしてはこれ`.github/prompts`というディレクトリの中に必ず格納することになっています。ここに格納しておくと先ほどのような感じでスラッシュコマンドで呼び出せますよという感じですね。

またプレゼンの内容からは外しますが、今回はGitHubのMCPサーバーとかも利用することになるので、ぜひこれ試してみたいという方は、ぜひMCPサーバーの利用も学習して利用してみてください。

例えば例としてはこんな感じのプロンプトを準備しています。ポイントとしてはですね、次のスライドに移るんですが、目的をできる限り細かくする、今回はIssue作成に限定するみたいな方ですね、みたいな風に限定してまずプロンプトを作りますと。

次が結構重要かなと思ってまして、入力をできる限り減らすようにイメージしてプロンプトを作っていくということかと思っています。例えばこれこれこういうIssueを作ってくださいみたいな時に、タイトルを明記し課題を明記し、現状も書き、特にどのファイルを直すかみたいなところも書きとかってやっていると、だったら自分で書いても同じじゃんみたいな感じになってしまうので、例えばなんですけど、もう期待値だけ「こういう挙動をしたいです」みたいな、「今はなってません」と。なのでそれを解消するためのステップを検討し、まずIssue作成してください、もしくは提案してくださいとかみたいな風にすると、勝手にやってくれて、そこに対して後続の後述するようなInstructionsの整備をしていけば、おのずといい感じのIssueができあがっていくだろうというふうに感じています。

### エージェントの連鎖

次がですね、もう一つが、次のプロンプト実行にスムーズにつなげるということで、例えばIssueは作りました、でもその次の開発は手でやってますみたいな時に、これをどうやったら次もエージェントを使えるだろうみたいなことを考えたりしていくと、結構うまくいくかなというふうに思いますね。つまりエージェントを連鎖させるという感じですね。

例えば、今チーム内やってるのは、Issueの作成をしましたと、そうしたら、その作成のIssue作成時に、このIssueを解決するための独自のプロンプトというのも生成して放り込んでおいてもらいます。そうすると、次にそのIssueの開発をする時というのは、そこで作ってもらったプロンプトを呼び出しておしまい、ないしはプロンプトを呼び出して補足情報を適宜入れてあげると、Issueの内容とプロンプトの内容と追加情報の内容を元に開発を開始してくれますと。

これが終わったら、例えばテストをするためのプロンプトを準備してもいいですし、それは普通に開発の中で勝手にやってもらうでもいいですし、みたいな風にどんどん繋げていって、最後PRの作成のプロンプトを実行しましょうと。この時、例えばIssue作成時にブランチ名だとか、あるいはIssue番号ですねとかがブランチに記載されるようにしておけば、じゃあわざわざこのIssueの解決をするPRですとかということを説明しなくても、PRのブランチの名前からIssue番号を読み取ってもらって、そこからIssueを読み取り、必要に応じてそのIssueの内容と今回の開発文の差分を含めてPRの本文を作ってくれるとかという風になって、どんどん連鎖していくっていうのが大事かなという風に思ってます。

また、チームでプロンプトを作る時には、特にメンバーによってはプロンプトを作りたいんだけど、いきなりコミットしてみんなが使えるプロンプトみたいな風になるのはちょっと難しいかもみたいな、奥手なメンバーも中にはいるんじゃないかと思います。なので、一旦Git非管理のプロンプトのディレクトリを用意しておいてあげて、まずは自分が使うためのプロンプトを作ると、これがうまく回ったら、ぜひ正式なものとしてコミットするみたいな感じで、一時的に使えるディレクトリというのを用意しておくと結構うまくいくかなというのが、本当に細かいですけど、これ結構いいティップスかと思ってます。

そんな感じで、プロンプトがうまくできましたと。 ## Step3: Instructionsのメンテナンス

あと最後ですね、最後はInstructionsのメンテナンスに移ります。この辺りから「こういうことができますね」と「うまくいきました」と、一方で逆に今度「ここはできてません」と、例えば実装できてるんだけど単体テストはかけてないとか、あるいはPHPはかけてるんだがE2Eテストはめちゃくちゃですみたいな風に、できないところにだんだん今度目が向いてくるフェーズはきっとあるはずです。

このタイミングから、そろそろエージェント自体を実際に育てていくというか、いわゆるInstructionsですね、指示書・知識書みたいなところのメンテナンスというのが始まってくるのかなというふうに思います。

個人的には、このメンテナンスも、それこそ最近では生成AIに分析させて作らせれば良いという本もあると思うんですけど、個人的には、それやってしまった時に、その内容の正しさとかをどうしても判定できなかったり、例外がいくつも、特に既存プロダクトにおいては特に例外がいっぱいあると思うので、そういったところを考えると、いきなりこれコミットは難しいよなみたいな感じで、結局どれも導入できなかったり、あるいは提案された対応のInstructionsから自分の必要なものを選択しないといけなくなって、逆に大変かなというふうに感じています。

なので個人的には、今のところですね、現時点においては、何かあった時にメンテナンスするというのが一番効率的なのかなというふうに思っています。

### メンテナンスのタイミング

何かあった時というのは何かといいますと、メンテナンスのタイミングについてですが、一番いいのは、一つの作業の指示だとか、あるいはPRを作るタイミングとかで、指示書の更新ってできるかなみたいなことを考えるのが良いのかなというふうに思います。

あることを、エージェントを使ってやるときに、ものすごいやり取りをしたと。エージェントといっぱいやり取りをして、その結果何か期待する挙動がありましたというときに、例えばこのやり取りから、あなたが次やるときに必要な情報ありますかみたいなことを聞いてあげて、そういったことを残しておくというのが便利かなというふうに思います。実際にそのためのプロンプトを一つ作っておくのもかなり良いかなという感じですね。

ここでは、コントローラーファイルだけに限定したいみたいなものを入れたりすることが可能になります。 何かあった時というのは何かといいますと メンテナンスのタイミングについてですが 一番いいのは 一つの作業の指示だとか あるいはプルリックを作るタイミングとかで 指示書の更新ってできるかな みたいなことを考えるのが 良いのかなというふうに思います あることを エージェントを使ってやるときに ものすごい やり取りをしたと エージェントといっぱいやり取りをして その結果何か期待する 挙動がありましたというときに 例えばこのやり取りから あなたが次やるときに 必要な情報ありますか みたいなことを聞いてあげて そういったことを残しておくというのが 便利かなというふうに思います 実際にそのためのプロンプトを 一つ作っておくのも かなり良いかなという感じですね ご視聴ありがとうございました お待ちしておくのも お待ちしておくのも お待ちしておくのも お待ちしておくのも お待ちしておくのも お待ちしておくのも お待ちしておくのも はい、どうぞ。 はい、どうぞ。 はい、コントローラーファイルだけに限定したいみたいなものを入れたりすることが可能になります。 はい、はい。 はい、はい。 はい、はい。 はい、はい。 はい、はい。 はい、はい。 はい。 はい、はい。 はい。 はい、はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい。 はい ## まとめ・未来への展望

エージェントとチームが共に進化する未来を目指して、こんな感じで導入だったり活用だったり、その先のまだ全然私もまだできないようなこととかを、みんなでちょっとずつやっていけたらいいなというふうに思っております。

## ご清聴・質疑応答

ご静聴ありがとうございました。

じゃあ一旦これで終わります。質疑応答をぜひ考えていただいている間になんですけど、懇親会ちょっと今回参加できないのでぜひ、もしこういう話面白いなと思ったらぜひこの後お声掛けいただいたら嬉しいです。あと話がつまらなかったとか知ってたみたいな話の方、ぜひ残ったリソースで右にある原宿ポム選手という選手、あと東京女子プロレスというワードぜひ覚えて帰っていただけたらと思います。

## 補足・話したりないこと

今回はうまく話にして盛り込めなかったんですけど、ボリュームオーバーしちゃったんですけど、AIエージェントを活用していくと開発者っていうのは最初のレビュワーになるんだなっていうところですとか、あとその生成AI、AIエージェントで開発するんだということになると、いわゆる依存関係が逆転するというか、我々がAIエージェントを使うのではなくて、AIエージェントが主体となってやるために我々はどう動くべきかみたいな感じで、チームの動き方や文化みたいなものが結構変えに行った方がいいだろうなということを最近感じています。

そんな感じで、自分が何やってるかとか、チームが何してるかとか、あるいは開発って何なのかみたいなっていうメタ的な分析や認知っていうのが大事になってくるなというのを最近考えているので、そのあたりもいつか話せたらなというふうに思っています。
